memory allocator

The memory allocator is special. the allocated data blocks can be moved to avoid fragmentation.
This means that the memory is not accessed directly.

Memory allocation functions work with "handles", then handles must be dereferenced to get the
memory pointer to them.

Some handles can be locked to ensure that they are not moved during their use, but this will lead to more fragmentation.

Heap organization

the function heap_init initizlizes a new heap on a block of RAM.

The end of the RAM zone contains a table of handles, and blocks are allocated starting from the start of the pool.
A handle is really an index in the handle table, handle zero is in the last bytes of the heap zone.

A pool uses a few more global data to manage its contents

-the base address
-the number of allocated blocks

A pool can use a total of 62 bits to represent the size and address.
The blocks are always aligned to 4 bytes and have a minimum size of 8 bytes, which allows us to discard 2 size bits.

struct heapentry_s
{
  /* first word */
  uint32_t addr;

  /* Second word */
  uint32_t size     :31;
  uint32_t locked   : 1;
};

management of free blocks

free blocks are kept in a linked list, each free zone contains
 - a pointer to the next free zone and
 - the size of the free zone.

Allocations are managed first fit, and if a request cannot be executed, it is retried after a compaction.

